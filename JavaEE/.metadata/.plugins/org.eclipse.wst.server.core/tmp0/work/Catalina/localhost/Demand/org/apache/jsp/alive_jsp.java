/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2016-03-09 19:41:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import javax.naming.*;
import javax.sql.*;
import org.apache.tomcat.dbcp.dbcp.BasicDataSource;

public final class alive_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
 
/**
	Alive JSP
	Requires Java 1.5 or later.
	Written for Tomcat
	This page will iterate through the below queries from the given JNDI data sources, 
	and report if they succeed. Combined with Alert site, this will allow monitorting of app availability
	and datapool availability.
	
	Each query should be written to return a singe column aliased as 'result' and a sysdate (to avoid caching). 
	
	Place this JSP in the Webroot of your applications WAR
	
	**/
	Map<String,String> connectionList = new TreeMap<String,String>();

	/** START MODIFICAIONS HERE **/ 
	connectionList.put("jdbc/myoracle","select 1 as result, sysdate from dual");
	/** END MODIFICAIONS HERE **/ 

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<title>Alive</title>\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\tspan {\r\n");
      out.write("\t\t\tcolor: green\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdiv {\r\n");
      out.write("\t\t\tcolor: red\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
 
	for (String key: connectionList.keySet()) {
		Context initCtx = null;
		Context env = null;
		DataSource pool = null;
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;   	
		out.print("<h2>" + key + "</h2>");       
		try{
			initCtx = new InitialContext();
			env = (Context)initCtx.lookup("java:comp/env");
			pool = (DataSource) env.lookup (key); 	
			conn = pool.getConnection( );
			stmt = conn.createStatement( ); 
			rs = stmt.executeQuery(connectionList.get(key)); 
			BasicDataSource bds = (BasicDataSource) pool;	
    		while(rs.next()){
    			out.print("<span>" + "'" + key + "' Alive: " + rs.getString("result") + " @ " + rs.getString("sysdate") + "</span>");
    			out.print("<br />");
    			out.print("<span>" + "-> Active Connections: " + bds.getNumActive() + "</span>");
    			out.print("<br />");
    			out.print("<span>" + "-> Idle Connections " + bds.getNumIdle() + "</span>");
    			out.print("<br />");
    			out.print("<span>" + "-> Max Active Connections: " + bds.getMaxActive() + "</span>");
    			out.print("<br />");
    			out.print("<span>" + "-> Max Idle Connections: " + bds.getMaxIdle() + "</span>");
    			out.print("<br />");
    		}       
		} catch (Exception e) {  
			out.print("<div>" + "'" + key + "' Dead" + "</div>");
		} finally {           
    		try{                
	        	stmt.close( );
	        	conn.close( );                
    		} catch (Exception sqle){} 
    	}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
